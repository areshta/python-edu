#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from tkinter import Tk, Text, Scrollbar, Menu, messagebox, filedialog, BooleanVar, Checkbutton, Label, Entry, StringVar, Grid, Frame, Button, Toplevel
import os, subprocess, json, string
from shutil import copyfile
from datetime import datetime
from Crypto.Cipher import AES

class Editor():
    def __init__(self, root, crypt):
        self.root = root
        self.TITLE = "Subedi Editor"
        self.file_path = "./in.txt"
        self.set_title()
        self.crypt = crypt

        frame = Frame(root)
        self.yscrollbar = Scrollbar(frame, orient="vertical")
        self.editor = Text(frame, yscrollcommand=self.yscrollbar.set)
        self.editor.pack(side="left", fill="both", expand=1)
        self.editor.config(wrap="word",  # use word wrapping
                           undo=True,  # Tk 8.4
                           width=80)
        self.editor.focus()
        self.yscrollbar.pack(side="right", fill="y")
        self.yscrollbar.config(command=self.editor.yview)
        frame.pack(fill="both", expand=1)

        # instead of closing the window, execute a function
        root.protocol("WM_DELETE_WINDOW", self.file_quit)

    def save_if_modified(self, event=None):
        if self.editor.edit_modified():  # modified
            response = messagebox.askyesnocancel("Save?",
                                                 "This document has been modified. Do you want to save changes?")  # yes = True, no = False, cancel = None
            if response:  # yes/save
                result = self.file_save()
                if result == "saved":  # saved
                    return True
                else:  # save cancelled
                    return None
            else:
                return response  # None = cancel/abort, False = no/discard
        else:  # not modified
            return True

    def file_open(self, event=None, filepath=None):
        result = self.save_if_modified()
        if result != None:  # None => Aborted or Save cancelled, False => Discarded, True = Saved or Not modified
            if filepath == None:
                filepath = filedialog.askopenfilename()
            if filepath != None and filepath != '':
                with open(filepath, "rb") as f:
                    bbuffer = f.read()
                    fileContents = crypt.decrypt(bbuffer)
               # Set current text to file contents
                self.editor.delete(1.0, "end")
                self.editor.insert(1.0, fileContents)
                self.editor.edit_modified(False)
                self.file_path = filepath

    def file_save(self, event=None):
        if self.file_path == None:
            result = self.file_save_as()
        else:
            result = self.file_save_as(filepath=self.file_path)
        return result

    def file_save_as(self, event=None, filepath=None):
        if filepath == None:
            filepath = filedialog.asksaveasfilename(filetypes=(
            ('Text files', '*.txt'), ('Python files', '*.py *.pyw'), ('All files', '*.*')))  # defaultextension='.txt'
        try:
            with open(filepath, 'wb') as f:
                text = self.editor.get(1.0, "end-1c")
                crMsg = crypt.encrypt(text)
                f.write(bytearray(crMsg))
                self.editor.edit_modified(False)
                self.file_path = filepath
                self.set_title()
                return "saved"
        except FileNotFoundError:
            print('FileNotFoundError')
            return "cancelled"

    def file_quit(self, event=None):
        result = self.save_if_modified()
        if result != None:  # None => Aborted or Save cancelled, False => Discarded, True = Saved or Not modified
            self.root.destroy()  # sys.exit(0)

    def set_title(self, event=None):
        if self.file_path != None:
            title = os.path.basename(self.file_path)
        else:
            title = "Untitled"
        self.root.title(title + " - " + self.TITLE)

    def undo(self, event=None):
        self.editor.edit_undo()

    def redo(self, event=None):
        self.editor.edit_redo()

    def main(self, event=None):
        self.editor.bind("<Control-o>", self.file_open)
        self.editor.bind("<Control-O>", self.file_open)
        self.editor.bind("<Control-S>", self.file_save)
        self.editor.bind("<Control-s>", self.file_save)
        self.editor.bind("<Control-y>", self.redo)
        self.editor.bind("<Control-Y>", self.redo)
        self.editor.bind("<Control-Z>", self.undo)
        self.editor.bind("<Control-z>", self.undo)

class ArFile:
    def __init__(self, fpath):
        self.fpath = fpath

    def check(self):
        return os.path.exists(self.fpath)

class ArCrypt:
    def __init__(self, psw):
        #print( psw)
        self.skey = psw * 16
        print(self.skey[0:16])
        self.key = str.encode(self.skey[0:16])

    def encrypt(self,txt):
        self.cipher = AES.new(self.key, AES.MODE_CFB, self.key)
        self.msg = self.cipher.encrypt(str.encode(txt))
        return self.msg

    def decrypt(self, bdata):
        cipher = AES.new(self.key, AES.MODE_CFB, self.key)
        dec = cipher.decrypt(bdata)
        return dec.decode()

class PswDialog:

    def __init__(self, parent):

        top = self.top = Toplevel(parent)

        Label(top, text="Password: ").pack()

        self.e = Entry(top, show = '*')
        self.e.pack(padx=5)

        b = Button(top, text="OK", command=self.ok)
        b.pack(pady=5)

    def ok(self):

        #print ("value is", self.e.get())
        self.psw = self.e.get();

        self.top.destroy()

if __name__ == "__main__":

    arFile = ArFile("./my1.bin")

    root = Tk()
    d = PswDialog(root)
    root.wait_window(d.top)

    crypt = ArCrypt(d.psw)  # type: ArCrypt

    root.wm_state('normal')

    editor = Editor(root, crypt)
    editor.file_path = arFile.fpath
    editor.set_title()
    editor.main()

    # store reserve copy before editing
    copyfile(arFile.fpath, arFile.fpath+'.old')

    #create initial file on start
    if not arFile.check():
        dt = datetime.now()
        with open(arFile.fpath, 'ab') as the_file:
            msg = 'Initial:' + str(datetime.now()) + '\n';
            crMsg = crypt.encrypt(msg)
            the_file.write(bytearray(crMsg))

    editor.file_open(filepath=arFile.fpath)
    root.mainloop()
